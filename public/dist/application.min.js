"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean-touch",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("touches"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("touches").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Touches","touches","dropdown","/touches(/create)?"),Menus.addSubMenuItem("topbar","touches","List Touches","touches"),Menus.addSubMenuItem("topbar","touches","New Touch","touches/create")}]),angular.module("touches").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTouches",{url:"/touches",templateUrl:"modules/touches/views/list-touches.client.view.html"}).state("createTouch",{url:"/touches/create",templateUrl:"modules/touches/views/create-touch.client.view.html"}).state("viewTouch",{url:"/touches/:touchId",templateUrl:"modules/touches/views/list-touches.client.view.html"}).state("editTouch",{url:"/touches/:touchId/edit",templateUrl:"modules/touches/views/edit-touch.client.view.html"})}]),angular.module("touches").controller("TouchesController",["$scope","$stateParams","$location","$window","Authentication","Touches","TouchPoints",function($scope,$stateParams,$location,$window,Authentication,Touches,TouchPoints){$scope.authentication=Authentication,$scope.touchPoints=[],setTimeout(function(){console.log($scope.touchPoints)},1e4),$scope.create=function(){var touch=new Touches({name:this.name});touch.$save(function(response){$location.path("touches/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(touch){if(touch){touch.$remove();for(var i in $scope.touches)$scope.touches[i]===touch&&$scope.touches.splice(i,1)}else $scope.touch.$remove(function(){$location.path("touches")})},$scope.update=function(){var touch=$scope.touch;touch.$update(function(){$location.path("touches/"+touch._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Touches.query().$promise.then(function(data){console.log(TouchPoints);var touchPoints=new TouchPoints;touchPoints.setPoints(data),$scope.touchPoints=touchPoints.touchPoints})},$scope.findOne=function(){$scope.touch=Touches.get({touchId:$stateParams.touchId})}}]),angular.module("touches").factory("Touches",["$resource",function($resource){return $resource("touches/:touchId",{touchId:"@_id"},{update:{method:"PUT"}})}]).service("TouchPoints",["$window","$rootScope","TouchPoint",function($window,$rootScope,TouchPoint){return function(){var $this=this;$this.touchPoints=[],$rootScope.svg=new Snap("#touch-svg"),this.setPoints=function(touches){return touches.forEach(function(touch){$this.touchPoints.push(new TouchPoint(touch))}),$this}}}]).service("TouchPoint",["$window","$rootScope","Touches",function($window,$rootScope,Touches){return function(options){var svg=$rootScope.svg,touchCoords=[.01*$window.innerWidth*options.location[0],.01*$window.innerHeight*options.location[1]],$this=this;$this.preventClick=!1;var deactivate=function(){console.log("sssss: %o",$this.point.selectAll(".field-group")),$this.point.removeClass("active").selectAll(".field-group").forEach(function(touch){touch.animate({transform:"t0,0"},500,function(){this.remove()})})},activate=function(){if(console.log("$this.preventClick: %o",$this.preventClick),$this.point.hasClass("active"))return deactivate();if($this.preventClick)return void($this.preventClick=!1);var fieldCount=Object.keys(options.modelData).length,i=0,fieldContainer=svg.group();for(var key in options.modelData){var degrees=360/fieldCount*i,fieldCoords=[parseInt(50*Math.cos(degrees*(Math.PI/180))),parseInt(50*Math.sin(degrees*(Math.PI/180)))],fieldCircle=(options.modelData[key],svg.circle(touchCoords[0],touchCoords[1],15)),fieldTitle=svg.group(svg.text(touchCoords[0],touchCoords[1],key).attr({"text-anchor":fieldCoords[0]>0?"start":"end",transform:"t"+(fieldCoords[0]>0?20:-20)+",0"})).attr({id:"field-title-"+key.toLowerCase(),"class":"field-title"}),transformString="t"+fieldCoords[0]+","+fieldCoords[1],fieldGroup=svg.group(fieldCircle,fieldTitle).attr({"class":"field-group",id:options.name.toLowerCase()+"-field-"+key.toLowerCase()}).animate({transform:transformString},500,mina.easeinout);fieldContainer.add(fieldGroup),i++,console.log("%o : degrees: %o | x: %o | y: %o",key,degrees,Math.cos(degrees),Math.sin(degrees))}$this.point.add(fieldContainer).addClass("active")},movePoint=function(dx,dy,posx,posy){var move=this.data("origTransform")+(this.data("origTransform")?"T":"t")+dx+","+dy;this.attr({transform:move}),$this.preventClick=!0},movePointStart=function(dx,dy,posx,posy){console.log("Started!"),this.data("origTransform",this.transform().local)},movePointEnd=function(mouse){var x=mouse.clientX/$window.innerWidth*100,y=mouse.clientY/$window.innerHeight*100;console.log("Ended! %o | %o, %o | %o",mouse,x,y,$this.options._id),$this.options.location=[x,y];var touch=Touches.get({touchId:$this.options._id},function(){console.log("TT: %o",this),touch.location=$this.options.location,touch.$update(function(){console.log("SUCCESS!")},function(){console.log("ERROR!")}),console.log("T: %o",touch)})},create=function(){var circle=svg.circle(touchCoords[0],touchCoords[1],15).attr({id:"base-"+options.name,"class":"base"}),title=svg.group(svg.text(touchCoords[0],touchCoords[1]-20,options.name).attr({"text-anchor":"middle"})).attr({id:"title-"+options.name.toLowerCase(),"class":"title"}),group=svg.group(circle,title).attr({id:"group-"+options.name,"class":"group"});return group.click(activate).drag(movePoint,movePointStart,movePointEnd)};this.options=options,this.point=create()}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);